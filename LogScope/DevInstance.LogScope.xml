<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DevInstance.LogScope</name>
    </assembly>
    <members>
        <member name="T:DevInstance.LogScope.Extensions.ServiceExtensions">
            <summary>
            This class contains a collection of methods to support dependency injection (DI) software design pattern
            , which is a technique for achieving Inversion of Control (IoC) between classes and their dependencies.
            </summary>
        </member>
        <member name="M:DevInstance.LogScope.Extensions.ServiceExtensions.AddLoggingManager(Microsoft.Extensions.DependencyInjection.IServiceCollection,DevInstance.LogScope.IScopeManager)">
            <summary>
            Adds already instantiated manager to the service collection. This method is useful 
            for adding manager with custom provider and formatter. <seealso cref="T:DevInstance.LogScope.ScopeLogFactory"/>
            for more information how to create custom provider and formatter.
            <example>
            Here is the example how use it in ConfigureServices method in ASP.NET Core app:
            <code>
            public void ConfigureServices(IServiceCollection services)
            {
            ...
                var manager = ScopeLogFactory.Create(LogLevel.DEBUG, myprovider, myformatter);
                services.AddLoggingManager(manager);
            ...
            }
            </code>
            </example>
            </summary>
            <param name="col">collection of services</param>
            <param name="manager">instance of the log scope manager</param>
            <returns>A reference to this instance after the operation has completed</returns>
        </member>
        <member name="M:DevInstance.LogScope.Extensions.ServiceExtensions.AddConsoleLogging(Microsoft.Extensions.DependencyInjection.IServiceCollection,DevInstance.LogScope.LogLevel)">
            <summary>
            Creates and adds console manager to the service collection.
            <example>
            Here is the example how use it in ConfigureServices method in ASP.NET Core app:
            <code>
            public void ConfigureServices(IServiceCollection services)
            {
            ...
                services.AddConsoleLogging(LogLevel.DEBUG);
            ...
            }
            </code>
            </example>
            </summary>
            <param name="col">collection of services</param>
            <param name="level">logging level. See <see cref="T:DevInstance.LogScope.LogLevel"/></param>
            <returns>A reference to this instance after the operation has completed</returns>
        </member>
        <member name="M:DevInstance.LogScope.Extensions.ServiceExtensions.AddConsoleLogging(Microsoft.Extensions.DependencyInjection.IServiceCollection,DevInstance.LogScope.LogLevel,DevInstance.LogScope.Formaters.DefaultFormaterOptions)">
            <summary>
            Creates and adds console manager to the service collection.
            <example>
            Here is the example how use it in ConfigureServices method in ASP.NET Core app:
                <code>
                public void ConfigureServices(IServiceCollection services)
                {
                    ...
                    services.AddConsoleLogging(LogLevel.DEBUG, new DefaultFormaterOptions { ShowTimestamp = true, ShowThreadNumber = true });
                    ...
                }
                </code>
                </example>
            </summary>
            <param name="col">collection of services</param>
            <param name="level">logging level. See <see cref="T:DevInstance.LogScope.LogLevel"/></param>
            <param name="options">
                Options for the default formatter. See <see cref="T:DevInstance.LogScope.Formaters.DefaultFormaterOptions"/>
            </param>
            <returns>A reference to this instance after the operation has completed</returns>
        </member>
        <member name="T:DevInstance.LogScope.ILogProvider">
            <summary>
            ILogProvider defines the log provider interface. 
            </summary>
        </member>
        <member name="M:DevInstance.LogScope.ILogProvider.WriteLine(System.String)">
            <summary>
            Write log line.
            </summary>
            <param name="line"></param>
        </member>
        <member name="T:DevInstance.LogScope.IScopeFormater">
            <summary>
            IScopeFormater defines the formatter interface. Every scope has start
             and end, can contain nested scope and lines between start an end. In
             addition to it, every scope can log the time of execution. Formatter
             interfaces describes the contract for developing customize formatter.
            </summary>
        </member>
        <member name="M:DevInstance.LogScope.IScopeFormater.ScopeStart(System.DateTime,System.String)">
            <summary>
            Called when scope starts
            </summary>
            <param name="timeStart">time of the scope's creation</param>
            <param name="scopeName">scope name</param>
            <returns>formated string</returns>
        </member>
        <member name="M:DevInstance.LogScope.IScopeFormater.ScopeEnd(System.DateTime,System.String,System.TimeSpan)">
            <summary>
            Called when scope ends
            </summary>
            <param name="endTime">time of the scope's end</param>
            <param name="scopeName">scope name</param>
            <param name="execTime">total time between start and end</param>
            <returns></returns>
        </member>
        <member name="M:DevInstance.LogScope.IScopeFormater.FormatNestedScopes(System.String,System.String)">
            <summary>
            Constructs full scope name, a combination parent and child scope
            </summary>
            <param name="scopeName">parent scope name</param>
            <param name="childScope">child scope name</param>
            <returns>return full name. Example: 'parent:child'</returns>
        </member>
        <member name="M:DevInstance.LogScope.IScopeFormater.FormatLine(System.String,System.String)">
            <summary>
            Returns formated message
            </summary>
            <param name="scopeName">scope name</param>
            <param name="message">message</param>
            <returns></returns>
        </member>
        <member name="T:DevInstance.LogScope.LogLevel">
            <summary>
            Log level defines the severity of the log. Logging 
            level is optional and depends on the provider's implementation.
            <seealso cref="T:DevInstance.LogScope.LoggingExtensions"/> for the helping methods to make
            it easier to use.
            </summary>
        </member>
        <member name="F:DevInstance.LogScope.LogLevel.NOLOG">
            <summary>
            Mo messages should be written in the log.
            </summary>
        </member>
        <member name="F:DevInstance.LogScope.LogLevel.ERROR">
            <summary>
            Only errors and exception. <see cref="M:DevInstance.LogScope.LoggingExtensions.E(DevInstance.LogScope.IScopeLog,System.Exception)"/>
            </summary>
        </member>
        <member name="F:DevInstance.LogScope.LogLevel.WARNING">
            <summary>
            Warnings (including errors)
            </summary>
        </member>
        <member name="F:DevInstance.LogScope.LogLevel.INFO">
            <summary>
            Information (preferred by default)
            </summary>
        </member>
        <member name="F:DevInstance.LogScope.LogLevel.DEBUG">
            <summary>
            Debug
            </summary>
        </member>
        <member name="F:DevInstance.LogScope.LogLevel.TRACE">
            <summary>
            All messages
            </summary>
        </member>
        <member name="T:DevInstance.LogScope.IScopeLog">
            <summary>
            Logging scope. Scope can be method or a specific part of it. The implementation is 
            based on IDisposable where calling Dispose ends the scope.
            </summary>
        </member>
        <member name="P:DevInstance.LogScope.IScopeLog.Name">
            <summary>
            Name of the scope
            </summary>
        </member>
        <member name="M:DevInstance.LogScope.IScopeLog.Line(DevInstance.LogScope.LogLevel,System.String)">
            <summary>
            Write one line
            </summary>
            <param name="level">Log level <see cref="T:DevInstance.LogScope.LogLevel"/></param>
            <param name="message">Message</param>
        </member>
        <member name="M:DevInstance.LogScope.IScopeLog.Line(System.String)">
            <summary>
            Write one line with default log level;
            </summary>
            <param name="message">Message</param>
        </member>
        <member name="M:DevInstance.LogScope.IScopeLog.Scope(DevInstance.LogScope.LogLevel,System.String)">
            <summary>
            Creates a nested scope
            </summary>
            <param name="level"></param>
            <param name="scope"></param>
            <returns></returns>
        </member>
        <member name="M:DevInstance.LogScope.IScopeLog.Scope(System.String)">
            <summary>
            Creates a nested scope with default log level;
            </summary>
            <param name="scope"></param>
            <returns></returns>
        </member>
        <member name="T:DevInstance.LogScope.IScopeManager">
            <summary>
            IScopeManager defines the log manager. Use <see cref="T:DevInstance.LogScope.ScopeLogFactory" />
            or <see cref="T:DevInstance.LogScope.Extensions.ServiceExtensions" />.
            </summary>
        </member>
        <member name="P:DevInstance.LogScope.IScopeManager.Provider">
            <summary>
            Provider <see cref="P:DevInstance.LogScope.IScopeManager.Provider"/>
            </summary>
        </member>
        <member name="P:DevInstance.LogScope.IScopeManager.Level">
            <summary>
            Logging level <see cref="T:DevInstance.LogScope.LogLevel"/>
            </summary>
        </member>
        <member name="M:DevInstance.LogScope.IScopeManager.CreateLogger(System.String)">
            <summary>
            Creates a main scope
            </summary>
            <param name="scope">scope's name</param>
            <returns>Reference to the scope <see cref="T:DevInstance.LogScope.IScopeLog"/></returns>
        </member>
        <member name="T:DevInstance.LogScope.LoggingExtensions">
            <summary>
            The goals of extension functions is to maintain simplicity and keep the code clean.
            </summary>
        </member>
        <member name="T:DevInstance.LogScope.ScopeLogFactory">
            <summary>
            Factory class to instantiate a scope manager.
            <example>
            Here is the example how to create console default logger:
            <code>
                var manager = ScopeLogFactory.Create(LogLevel.DEBUG, myprovider, myformatter);
            }
            </code>
            </example>
            <example>
            Another example how to create custom provider and formatter:
            <code>
                var manager = ScopeLogFactory.CreateConsoleLogger(LogLevel.DEBUG);
            }
            </code>
            </example>
            </summary>
        </member>
    </members>
</doc>
