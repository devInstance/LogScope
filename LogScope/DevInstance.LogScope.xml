<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DevInstance.LogScope.NET</name>
    </assembly>
    <members>
        <member name="T:DevInstance.LogScope.Extensions.ServiceExtensions">
            <summary>
            This class contains a collection of methods to support dependency injection (DI) software design pattern
            , which is a technique for achieving Inversion of Control (IoC) between classes and their dependencies.
            </summary>
        </member>
        <member name="M:DevInstance.LogScope.Extensions.ServiceExtensions.AddScopeLogging(Microsoft.Extensions.DependencyInjection.IServiceCollection,DevInstance.LogScope.IScopeManager)">
            <summary>
            Adds already instantiated manager to the service collection. This method is useful 
            for adding manager with custom provider and formatter. <seealso cref="T:DevInstance.LogScope.DefaultScopeLogFactory"/>
            for more information how to create custom provider and formatter.
            <example>
            Here is the example how use it in ConfigureServices method in ASP.NET Core app:
            <code>
            public void ConfigureServices(IServiceCollection services)
            {
            ...
                var manager = ScopeLogFactory.Create(LogLevel.DEBUG, myprovider, myformatter);
                services.AddScopeLogging(manager);
            ...
            }
            </code>
            </example>
            </summary>
            <param name="col">collection of services</param>
            <param name="manager">instance of the log scope manager</param>
            <returns>A reference to this instance after the operation has completed</returns>
        </member>
        <member name="M:DevInstance.LogScope.Extensions.ServiceExtensions.AddConsoleScopeLogging(Microsoft.Extensions.DependencyInjection.IServiceCollection,DevInstance.LogScope.LogLevel)">
            <summary>
            Creates and adds console manager to the service collection.
            <example>
            Here is the example how use it in ConfigureServices method in ASP.NET Core app:
            <code>
            public void ConfigureServices(IServiceCollection services)
            {
            ...
                services.AddConsoleScopeLogging(LogLevel.DEBUG);
            ...
            }
            </code>
            </example>
            </summary>
            <param name="col">collection of services</param>
            <param name="level">logging level. See <see cref="T:DevInstance.LogScope.LogLevel"/></param>
            <returns>A reference to this instance after the operation has completed</returns>
        </member>
        <member name="M:DevInstance.LogScope.Extensions.ServiceExtensions.AddConsoleScopeLogging(Microsoft.Extensions.DependencyInjection.IServiceCollection,DevInstance.LogScope.LogLevel,DevInstance.LogScope.Formatters.DefaultFormattersOptions)">
            <summary>
            Creates and adds console manager to the service collection.
            <example>
            Here is the example how use it in ConfigureServices method in ASP.NET Core app:
                <code>
                public void ConfigureServices(IServiceCollection services)
                {
                    ...
                    services.AddConsoleScopeLogging(LogLevel.DEBUG, new DefaultFormaterOptions { ShowTimestamp = true, ShowThreadNumber = true });
                    ...
                }
                </code>
                </example>
            </summary>
            <param name="col">collection of services</param>
            <param name="level">logging level. See <see cref="T:DevInstance.LogScope.LogLevel"/></param>
            <param name="options">
                Options for the default formatter. See <see cref="T:DevInstance.LogScope.Formatters.DefaultFormattersOptions"/>
            </param>
            <returns>A reference to this instance after the operation has completed</returns>
        </member>
    </members>
</doc>
